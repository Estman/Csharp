#region

using System;
using System.ComponentModel.DataAnnotations;
using System.Text.RegularExpressions;

#endregion

namespace Application.Models
{
    //public class NewPasswordDifferentFromPrevious : ValidationAttribute
    //{
    //    public override bool IsValid(object value)
    //    {
    //        return new ClientRepository().ClientNameAvailable(value as string);
    //    }
    //}

    public class ValidPasswordAttribute : ValidationAttribute
    {
        public int MinimumScore { get; set; }

        public override bool IsValid(object value)
        {
            var password = value as string;
            int strength = Convert.ToInt32(PasswordStrengthCheck.GetScore(password));
            return strength >= MinimumScore;
        }
    }

    public static class PasswordStrengthCheck
    {
        public enum PasswordScore
        {
            Blank = 0,
            VeryWeak = 1,
            Weak = 2,
            Medium = 3,
            Strong = 4,
            VeryStrong = 5
        }

        public const int minimumRequired = 5;

        /// <summary>
        ///     Returns a string indicating the strength of the password
        /// </summary>
        /// <param name="password">The password to test</param>
        /// <returns>The strength of the password</returns>
        public static string CheckStrength(string password)
        {
            if (String.IsNullOrWhiteSpace(password)) //password.Length < 1)
                return PasswordScore.Blank.ToString();
            if (password.Length < 6)
                return PasswordScore.VeryWeak.ToString();

            int score = 1;

            if (password.Length >= 6)
                score++;
            //if (password.Length >= 12)
            //    score++;
            if (Regex.Match(password, @"\d+", RegexOptions.ECMAScript).Success)
                score++;
            if (Regex.Match(password, @"[a-zA-Z]", RegexOptions.ECMAScript).Success)
                score++;

            if (
                Regex.Match(password, @".[~,!,@,#,$,%,^,&,*,?,_,~,-,Â£,(,),{,},\[,\],:,;,',,,<,>,.,?,/,\\,|]",
                    RegexOptions.ECMAScript).Success)
                score++;

            if (score > PasswordScore.VeryStrong.GetHashCode())
                score = PasswordScore.VeryStrong.GetHashCode();

            return ((PasswordScore) score).ToString();
        }

        public static int GetScore(string password)
        {
            PasswordScore score;
            Enum.TryParse(CheckStrength(password), out score);

            switch (score)
            {
                case PasswordScore.Blank:
                    return 0;
                case PasswordScore.VeryWeak:
                    return 1;
                case PasswordScore.Weak:
                    return 2;
                case PasswordScore.Medium:
                    return 3;
                case PasswordScore.Strong:
                    return 4;
                case PasswordScore.VeryStrong:
                    return 5;
            }
            return 0;
        }
    }
}



Using:

PasswordStrengthCheck.CheckStrength(textBox2.Text);
